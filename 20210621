1. logback日志拦截
  继承extends RollingFileAppender<ILoggingEvent>
  
        start();
        try {
            MDC.put(PoliceDogConstants.BIZ_MONITOR_TRACE_ID_KEY, getTraceId());
            .......
        } finally {
            super.subAppend(event);
            MDC.clear();
        }
        
        
2. log4j日志拦截
    继承extends DailyRollingFileAppender
    
 
3. 线程池可调节
    (1) 队列满的时候，调小capacity
        public void put(E e) throws InterruptedException {
        if (e == null) throw new NullPointerException();
        // Note: convention in all put/take/etc is to preset local var
        // holding count negative to indicate failure unless set.
        int c = -1;
        Node<E> node = new Node<E>(e);
        final ReentrantLock putLock = this.putLock;
        final AtomicInteger count = this.count;
        putLock.lockInterruptibly();
        try {
            /*
             * Note that count is used in wait guard even though it is
             * not protected by lock. This works because count can
             * only decrease at this point (all other puts are shut
             * out by lock), and we (or some other waiting put) are
             * signalled if it ever changes from capacity. Similarly
             * for all other uses of count in other wait guards.
             */
            // capacity改变之后可能会小于count
            while (count.get() >= capacity) {
                notFull.await();
            }
            enqueue(node);
            c = count.getAndIncrement();
            if (c + 1 < capacity)
                notFull.signal();
        } finally {
            putLock.unlock();
        }
        if (c == 0)
            signalNotEmpty();
      }
     
   （2）设置队列大小
    public  boolean setCapacity(int capacity) {
        // 加锁
        this.fullyLock();
        try {
            this.capacity = capacity;
            //如果改大了，通知生产者
            if (count.get() < capacity) {
                notFull.signal();
            }
            return true;
        } finally {
            this.fullyUnlock();
        }
    }
    
 4. 拦截器
     (1) class MonitorProxyCreator extends AbstractAutoProxyCreator implements InitializingBean 
        public MonitorProxyCreator() {
          super();
          setOrder(Ordered.LOWEST_PRECEDENCE);
        }

      public void setConfigLocation(Resource configLocation) throws Exception {
        try {
            List<BizDetailMonitorConfig> stableConfigs = BizMonitorConfigLoader.load(configLocation.getInputStream());
            if (null != stableConfigs) {
                this.bizLogDetailMonitorConfigMap = Collections.unmodifiableMap(convertListToMap(stableConfigs));
            }
        } catch (Exception e) {
            throw e;
        }

      }
      
 5. 连接池
    (1) 初始化
      private static PoolingHttpClientConnectionManager cm;

      /**
       * 初始化httpclient连接池
       */
      private static void initPoolingHttpClientConnectionManager() {
        if (null == cm) {
            //初始化连接池数量值
            ConnectionSocketFactory plainsf = PlainConnectionSocketFactory.getSocketFactory();
            LayeredConnectionSocketFactory sslsf = SSLConnectionSocketFactory.getSocketFactory();
            Registry<ConnectionSocketFactory> registry = RegistryBuilder.<ConnectionSocketFactory>create().register("http", plainsf).register("https", sslsf).build();

            cm = new PoolingHttpClientConnectionManager(registry);
            //配置最大连接数和最大路由连接数，如果你要连接的url只有一个，两个必须配置成一样，否则只会取最小值。（默认最大连接是20，每个路由最大连接是2）
            //建议maxTotal = maxPerRoute * url个数
            cm.setMaxTotal(httpClientEnhanceConfig.getMaxTotal()); // 设置连接池线程最大数量
            cm.setDefaultMaxPerRoute(httpClientEnhanceConfig.getDefaultMaxPerRoute());// 设置单个路由最大的连接线程数量
            //设置单个host默认路由
            HashMap<String, Integer> dataMap = httpClientEnhanceConfig.getHostMaxPerRoute();
            if (null != dataMap && !dataMap.isEmpty()) {
                for (Entry<String, Integer> entry : dataMap.entrySet()) {
                    HttpHost httpHost = new HttpHost(entry.getKey());
                    cm.setMaxPerRoute(new HttpRoute(httpHost), entry.getValue());
                }
            }
        }
      }
      
      
      // 抛异常重试三次
    private static HttpRequestRetryHandler getCustomHttpRequestRetryHandler() {
        HttpRequestRetryHandler myRetryHandler = new HttpRequestRetryHandler() {
            @Override
            public boolean retryRequest(IOException exception, int executionCount, HttpContext context) {
                if (executionCount > httpClientEnhanceConfig.getRetryRequestCount()) {
                    // Do not retry if over max retry count
                    return false;
                }
                if (exception instanceof InterruptedIOException) {
                    // Timeout
                    return false;
                }
                if (exception instanceof UnknownHostException) {
                    // Unknown host
                    return false;
                }
                if (exception instanceof ConnectTimeoutException) {
                    // Connection refused
                    return false;
                }
                if (exception instanceof SSLException) {
                    // SSL handshake exception
                    return false;
                }
                if (exception instanceof NoHttpResponseException) {
                    // NoHttpResponseException handshake exception
                    logger.error("http client retries again " + executionCount + " in NoHttpResponseException request");
                    return true;
                }
                HttpClientContext clientContext = HttpClientContext.adapt(context);
                HttpRequest request = clientContext.getRequest();
                boolean idempotent = !(request instanceof HttpEntityEnclosingRequest);
                if (idempotent) {
                    // Retry if the request is considered idempotent
                    return true;
                }
                return false;
            }
        };
        return myRetryHandler;
    }

    /**
     * 获取连接请求配置
     *
     * @param connectTimeout
     * @param readTimeout
     * @return
     */
    public static RequestConfig getRequestConfig(int connectTimeout, int readTimeout) {
        // 创建http request的配置信息
        RequestConfig requestConfig = RequestConfig.custom()
                .setSocketTimeout(readTimeout) // 读取超时单位毫秒
                .setConnectTimeout(connectTimeout) // 连接超时单位毫秒
                .setConnectionRequestTimeout(Constants.DEFAULT_CONNECT_REQUEST_TIMEOUT) // 连接请求超时单位毫秒
                .build();
        return requestConfig;
    }
    
    /**
     * 从连接池获取连接请求
     *
     * @param connectTimeout
     * @param readTimeout
     * @return
     */
    public static CloseableHttpClient getHttpClientByPool(int connectTimeout, int readTimeout) {
        // 创建httpclient连接池
        if (null == cm) {
            initPoolingHttpClientConnectionManager();
        }

        //获取自定义的重试策略
        HttpRequestRetryHandler myRetryHandler = getCustomHttpRequestRetryHandler();
        // 创建http request的配置信息
        RequestConfig requestConfig = RequestConfig.custom()
                .setSocketTimeout(readTimeout) // 读取超时单位毫秒
                .setConnectTimeout(connectTimeout) // 连接超时单位毫秒
                .setConnectionRequestTimeout(Constants.DEFAULT_CONNECT_REQUEST_TIMEOUT) // 连接请求超时单位毫秒
                .build();

        //连接池构建httpClient
        CloseableHttpClient httpClient = HttpClients.custom()
                .setConnectionManager(cm)
                .setDefaultRequestConfig(requestConfig)
                .setRetryHandler(myRetryHandler)
                .build();

        return httpClient;
    }

      
      
 
 
