1. logback
  继承extends RollingFileAppender<ILoggingEvent>
  
        start();
        try {
            MDC.put(PoliceDogConstants.BIZ_MONITOR_TRACE_ID_KEY, getTraceId());
            .......
        } finally {
            super.subAppend(event);
            MDC.clear();
        }
        
        
2. log4j
    继承extends DailyRollingFileAppender
    
 
3. 线程池可调节
    (1) 队列满的时候，调小capacity
        public void put(E e) throws InterruptedException {
        if (e == null) throw new NullPointerException();
        // Note: convention in all put/take/etc is to preset local var
        // holding count negative to indicate failure unless set.
        int c = -1;
        Node<E> node = new Node<E>(e);
        final ReentrantLock putLock = this.putLock;
        final AtomicInteger count = this.count;
        putLock.lockInterruptibly();
        try {
            /*
             * Note that count is used in wait guard even though it is
             * not protected by lock. This works because count can
             * only decrease at this point (all other puts are shut
             * out by lock), and we (or some other waiting put) are
             * signalled if it ever changes from capacity. Similarly
             * for all other uses of count in other wait guards.
             */
            // capacity改变之后可能会小于count
            while (count.get() >= capacity) {
                notFull.await();
            }
            enqueue(node);
            c = count.getAndIncrement();
            if (c + 1 < capacity)
                notFull.signal();
        } finally {
            putLock.unlock();
        }
        if (c == 0)
            signalNotEmpty();
      }
     
   （2）设置队列大小
    public  boolean setCapacity(int capacity) {
        // 加锁
        this.fullyLock();
        try {
            this.capacity = capacity;
            //如果改大了，通知生产者
            if (count.get() < capacity) {
                notFull.signal();
            }
            return true;
        } finally {
            this.fullyUnlock();
        }
    }
